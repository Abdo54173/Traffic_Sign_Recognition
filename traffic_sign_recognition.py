# -*- coding: utf-8 -*-
"""Traffic_Sign_Recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y5xCDLe5lTgTZl9dFQNX6ru0bjzBsaOx
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from google.colab import files
files.upload()

!pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d meowmeowmeowmeowmeow/gtsrb-german-traffic-sign

!unzip -q gtsrb-german-traffic-sign.zip -d gtsrb

import os
import cv2
from sklearn.model_selection import train_test_split

data_dir = "gtsrb/Train"

IMG_SIZE = 32

images = []
labels = []

for class_id in os.listdir(data_dir):
    class_path = os.path.join(data_dir, class_id)
    if os.path.isdir(class_path):
        for img_name in os.listdir(class_path):
            img_path = os.path.join(class_path, img_name)


            img = cv2.imread(img_path)
            if img is None:
                continue


            img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))


            img = img.astype('float32') / 255.0


            images.append(img)
            labels.append(int(class_id))

images = np.array(images)
labels = np.array(labels)

print("Images shape:", images.shape)
print("Labels shape:", labels.shape)

X_train, X_test, y_train, y_test = train_test_split(
    images, labels, test_size=0.2, random_state=42, stratify=labels
)

print("Training samples:", X_train.shape[0])
print("Testing samples:", X_test.shape[0])

import tensorflow as tf
from tensorflow.keras import layers, models

num_classes = len(np.unique(labels))

model = models.Sequential([

    layers.Conv2D(32, (3,3), activation='relu', input_shape=(32,32,3)),
    layers.MaxPooling2D((2,2)),


    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),


    layers.Conv2D(128, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),


    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

history = model.fit(
    X_train, y_train,
    epochs=10,
    batch_size=64,
    validation_data=(X_test, y_test)
)

import matplotlib.pyplot as plt

# Accuracy
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.title("Model Accuracy")
plt.show()

# Loss
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend()
plt.title("Model Loss")
plt.show()

from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns

y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)

cm = confusion_matrix(y_test, y_pred_classes)

plt.figure(figsize=(12,8))
sns.heatmap(cm, annot=False, cmap="Blues")
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("True")
plt.show()

print(classification_report(y_test, y_pred_classes))

from tensorflow.keras.preprocessing.image import ImageDataGenerator

datagen = ImageDataGenerator(
    rotation_range=10,
    width_shift_range=0.1,
    height_shift_range=0.1,
    zoom_range=0.1,
    shear_range=0.1,
    horizontal_flip=False,
    fill_mode='nearest'
)

datagen.fit(X_train)

history = model.fit(
    datagen.flow(X_train, y_train, batch_size=64),
    epochs=15,
    validation_data=(X_test, y_test)
)

import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras import layers, models

IMG_SIZE_MOBILENET = 96

X_train_resized = tf.image.resize(X_train, (IMG_SIZE_MOBILENET, IMG_SIZE_MOBILENET))
X_test_resized  = tf.image.resize(X_test, (IMG_SIZE_MOBILENET, IMG_SIZE_MOBILENET))

print("Resized train shape:", X_train_resized.shape)
print("Resized test shape:", X_test_resized.shape)

from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras import layers, models

base_model = MobileNetV2(weights="imagenet", include_top=False,
                         input_shape=(IMG_SIZE_MOBILENET, IMG_SIZE_MOBILENET, 3))

base_model.trainable = False

model_mobilenet = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(num_classes, activation='softmax')
])

model_mobilenet.compile(optimizer='adam',
                        loss='sparse_categorical_crossentropy',
                        metrics=['accuracy'])

history_mobilenet = model_mobilenet.fit(
    X_train_resized, y_train,
    epochs=10,
    batch_size=32,
    validation_data=(X_test_resized, y_test)
)

loss_cnn, acc_cnn = model.evaluate(X_test, y_test, verbose=0)

loss_mobilenet, acc_mobilenet = model_mobilenet.evaluate(X_test_resized, y_test, verbose=0)

print("Custom CNN Accuracy:", acc_cnn)
print("MobileNetV2 (96x96) Accuracy:", acc_mobilenet)

import matplotlib.pyplot as plt

plt.bar(["Custom CNN", "MobileNetV2"], [acc_cnn, acc_mobilenet], color=['blue','green'])
plt.ylabel("Accuracy")
plt.title("Model Comparison")
plt.show()